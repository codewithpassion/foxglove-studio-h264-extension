diff --git a/lib/flv/amf-parser.js b/lib/flv/amf-parser.js
index 968753c..6abe201 100644
--- a/lib/flv/amf-parser.js
+++ b/lib/flv/amf-parser.js
@@ -156,9 +156,9 @@ class AmfReader {
 
 class AmfParser {
 
-    static parse(buffer) {
+    static async parse(buffer) {
         let reader = new AmfReader(buffer);
-        return reader.read();
+        return await reader.read();
     }
 
 }
diff --git a/lib/flv/parser-impl.js b/lib/flv/parser-impl.js
index 5b4ee0c..1b5b592 100644
--- a/lib/flv/parser-impl.js
+++ b/lib/flv/parser-impl.js
@@ -17,12 +17,12 @@ class ParserImpl {
         this.reader = SourceReader.create(this.source);
     }
 
-    parse() {
+    async parse() {
         // Parse header
         this._parseHeader();
 
         // Create movie
-        this._createMovie();
+        await this._createMovie();
 
         // Parse body
         this._parseBody();
@@ -41,16 +41,16 @@ class ParserImpl {
         return this.movie;
     }
 
-    _parseHeader() {
+    async _parseHeader() {
         let buffer = Buffer.allocUnsafe(Utils.HEADER_SIZE);
-        this.reader.read(buffer, 0);
+        await this.reader.read(buffer, 0);
         if (buffer.toString('ascii', 0, 3) !== Utils.HEADER_PREFIX || buffer[3] !== Utils.HEADER_VERSION) {
             throw new Error('FLV header not found');
         }
         this.pos = buffer[8];
     }
 
-    _createMovie() {
+    async _createMovie() {
         // Create movie
         this.movie = new Movie();
         this.movie.timescale = Utils.MOVIE_TIMESCALE;
@@ -64,11 +64,11 @@ class ParserImpl {
         this.audioTrack.timescale = Utils.MOVIE_TIMESCALE;
     }
 
-    _parseBody() {
+    async _parseBody() {
         let buffer = Buffer.allocUnsafe(15);
         let size = this.reader.size();
         while (this.pos < size) {
-            this.pos += this.reader.read(buffer, this.pos);
+            this.pos += await this.reader.read(buffer, this.pos);
             let type = buffer[4];
             if (undefined === type) {
                 break;
@@ -89,9 +89,9 @@ class ParserImpl {
         }
     }
 
-    _parseScript(dataSize) {
+    async _parseScript(dataSize) {
         let buffer = Buffer.allocUnsafe(dataSize);
-        this.reader.read(buffer, this.pos);
+        await this.reader.read(buffer, this.pos);
 
         let data = AmfParser.parse(buffer);
         if (data && data.length > 1) {
@@ -111,11 +111,11 @@ class ParserImpl {
         }
     }
 
-    _parseAudio(dataSize, timestamp) {
+    async _parseAudio(dataSize, timestamp) {
         // Read header
         let headerSize = 2;
         let buffer = Buffer.allocUnsafe(headerSize);
-        this.reader.read(buffer, this.pos);
+        await this.reader.read(buffer, this.pos);
 
         // Metadata
         let flags = buffer[0];
@@ -137,7 +137,7 @@ class ParserImpl {
             // Get codec info
             let extraData = Buffer.allocUnsafe(4 + dataSize - headerSize);
             extraData.write('mp4a');
-            this.reader.read(extraData, this.pos + headerSize, 4);
+            await this.reader.read(extraData, this.pos + headerSize, 4);
             this.audioTrack.extraData = extraData;
             this.audioTrack.codec = CodecParser.parse(extraData).codec();
         } else {
@@ -153,11 +153,11 @@ class ParserImpl {
         }
     }
 
-    _parseVideo(dataSize, timestamp) {
+    async _parseVideo(dataSize, timestamp) {
         // Read header
         let headerSize = 5;
         let buffer = Buffer.allocUnsafe(headerSize);
-        this.reader.read(buffer, this.pos);
+        await this.reader.read(buffer, this.pos);
 
         // Metadata
         let flags = buffer[0];
@@ -173,7 +173,7 @@ class ParserImpl {
             // Get codec info
             let extraData = Buffer.allocUnsafe(4 + dataSize - headerSize);
             extraData.write('avcC');
-            this.reader.read(extraData, this.pos + headerSize, 4);
+            await this.reader.read(extraData, this.pos + headerSize, 4);
             this.videoTrack.extraData = extraData;
             this.videoTrack.codec = CodecParser.parse(extraData).codec();
         } else {
diff --git a/lib/fragment-list-builder.js b/lib/fragment-list-builder.js
index 0bb6487..6d70755 100644
--- a/lib/fragment-list-builder.js
+++ b/lib/fragment-list-builder.js
@@ -7,12 +7,12 @@ const FRAGMENT_TIMESCALE = 1000;
 
 class FragmentListBuilder {
 
-    static build(movie, fragmentDuration) {
+    static async build(movie, fragmentDuration) {
         let fragmentList = new FragmentList();
         fragmentList.fragmentDuration = fragmentDuration;
         fragmentList.duration = movie.duration * FRAGMENT_TIMESCALE / movie.timescale;
         fragmentList.timescale = FRAGMENT_TIMESCALE;
-        let videoTrack = movie.videoTrack();
+        let videoTrack = await movie.videoTrack();
         if (videoTrack) {
             fragmentList.video = {
                 timescale: videoTrack.timescale,
diff --git a/lib/fragment-reader.js b/lib/fragment-reader.js
index d73ee2b..0f67225 100644
--- a/lib/fragment-reader.js
+++ b/lib/fragment-reader.js
@@ -12,7 +12,7 @@ class FragmentReader {
      * @param {(int|Buffer)} source
      * @returns {Array}
      */
-    static readSamples(fragment, source) {
+    static async readSamples(fragment, source) {
         // Collect entries
         let entries = fragment.samples.map((sample, i) => {
             return {
@@ -50,7 +50,7 @@ class FragmentReader {
         let reader = SourceReader.create(source);
         for (let i = 0, l = buffers.length; i < l; i++) {
             let buffer = buffers[i];
-            reader.read(buffer.buffer, buffer.offset);
+            await reader.read(buffer.buffer, buffer.offset);
         }
 
         // Return array of buffers
diff --git a/lib/index/fragment-list-indexer.js b/lib/index/fragment-list-indexer.js
index de91da7..844e9d8 100644
--- a/lib/index/fragment-list-indexer.js
+++ b/lib/index/fragment-list-indexer.js
@@ -100,7 +100,7 @@ class FragmentListIndexer {
         fs.writeSync(fd, buffer, 0, buffer.length, 0);
     }
 
-    static read(fd) {
+    static async read(fd) {
         return new IndexedFragmentList(fd);
     }
 
diff --git a/lib/movie-parser.js b/lib/movie-parser.js
index 2b51e8b..5b0d685 100644
--- a/lib/movie-parser.js
+++ b/lib/movie-parser.js
@@ -11,10 +11,10 @@ const HEADER_SIZE = 8;
 
 class MovieParser {
 
-    static parse(source) {
+    static async parse(source) {
         let reader = SourceReader.create(source);
         let header = Buffer.allocUnsafe(HEADER_SIZE);
-        reader.read(header, 0);
+        await reader.read(header, 0);
 
         for (let parser of PARSERS) {
             if (parser.check(header)) {
diff --git a/lib/mp4/builder-impl.js b/lib/mp4/builder-impl.js
index 956e9ff..22699b4 100644
--- a/lib/mp4/builder-impl.js
+++ b/lib/mp4/builder-impl.js
@@ -25,7 +25,7 @@ class BuilderImpl {
         this.fd = fd;
     }
 
-    build() {
+    async build() {
         // Tracks and Samples
         let tracks = [this.movie.videoTrack(), this.movie.audioTrack()]
             .filter(track => track !== null && track.samples.length > 0);
@@ -247,7 +247,7 @@ class BuilderImpl {
         for (let i = 0, l = samples.length; i < l; i++) {
             let sample = samples[i];
             let buffer = Buffer.allocUnsafe(sample.size);
-            this.reader.read(buffer, sample.offset);
+            await this.reader.read(buffer, sample.offset);
             fs.writeSync(this.fd, buffer, 0, buffer.length, pos);
             pos += buffer.length;
         }
diff --git a/lib/mp4/container-atom.js b/lib/mp4/container-atom.js
index 0e2daee..1d17773 100644
--- a/lib/mp4/container-atom.js
+++ b/lib/mp4/container-atom.js
@@ -44,7 +44,7 @@ class ContainerAtom extends Atom {
         return null;
     }
 
-    parse(buffer) {
+    async parse(buffer) {
         let limit = buffer.length;
         let offset = 0;
         while (offset < limit) {
@@ -57,7 +57,7 @@ class ContainerAtom extends Atom {
             if (this.availableAtoms().indexOf(name) !== -1) {
                 let atom = Utils.createAtom(name);
                 if (atom !== null) {
-                    atom.parse(buffer.slice(offset, offset + size - 8));
+                    await atom.parse(buffer.slice(offset, offset + size - 8));
                     this.addAtom(atom);
                 }
             }
@@ -69,14 +69,14 @@ class ContainerAtom extends Atom {
         }
     }
 
-    build(buffer, offset) {
+    async build(buffer, offset) {
         // header
         buffer.writeUInt32BE(this.bufferSize(), offset);
         buffer.write(this.type(), offset + 4);
         // atoms
         offset += 8;
         for (let atom of this.atoms) {
-            atom.build(buffer, offset);
+            await atom.build(buffer, offset);
             offset += atom.bufferSize();
         }
     }
diff --git a/lib/mp4/parser-impl.js b/lib/mp4/parser-impl.js
index f1aa459..d2bac93 100644
--- a/lib/mp4/parser-impl.js
+++ b/lib/mp4/parser-impl.js
@@ -17,12 +17,12 @@ class ParserImpl {
         this.reader = SourceReader.create(this.source);
     }
 
-    parse() {
+    async parse() {
         // Get moov atom
-        this._findMoovAtom();
+        await this._findMoovAtom();
 
         // Create movie
-        this._createMovie();
+        await this._createMovie();
 
         // Create tracks
         let trakAtoms = this.moovAtom.getAtoms(Utils.ATOM_TRAK);
@@ -41,29 +41,29 @@ class ParserImpl {
         return this.movie;
     }
 
-    _findMoovAtom() {
+    async _findMoovAtom() {
         this.moovAtom = null;
 
         let pos = 0;
         let size = this.reader.size();
         let buffer = Buffer.allocUnsafe(8);
         while (pos < size) {
-            this.reader.read(buffer, pos);
+            await this.reader.read(buffer, pos);
             let headerSize = 8;
             let atomSize = buffer.readUInt32BE(0);
             let atomType = buffer.toString('ascii', 4);
             if (atomSize === 0) {
                 atomSize = size - pos;
             } else if (atomSize === 1) {
-                this.reader.read(buffer, pos + buffer.length);
+                await this.reader.read(buffer, pos + buffer.length);
                 atomSize = BufferUtils.readUInt64BE(buffer, 0);
                 headerSize += 8;
             }
             if (Utils.ATOM_MOOV === atomType) {
                 let buffer = Buffer.allocUnsafe(atomSize - headerSize);
-                if (this.reader.read(buffer, pos + headerSize) === buffer.length) {
+                if (await this.reader.read(buffer, pos + headerSize) === buffer.length) {
                     this.moovAtom = Utils.createAtom(atomType);
-                    this.moovAtom.parse(buffer);
+                    await this.moovAtom.parse(buffer);
                     break;
                 }
             } else {
@@ -76,12 +76,12 @@ class ParserImpl {
         }
     }
 
-    _createMovie() {
+    async _createMovie() {
         // Create movie
         this.movie = new Movie();
 
         // Add meta information
-        let mvhdAtom = this.moovAtom.getAtom(Utils.ATOM_MVHD);
+        let mvhdAtom = await this.moovAtom.getAtom(Utils.ATOM_MVHD);
         if (mvhdAtom) {
             this.movie.timescale = mvhdAtom.timescale;
             this.movie.duration = mvhdAtom.duration;
diff --git a/lib/mp4/parser.js b/lib/mp4/parser.js
index b11c62d..925a0b9 100644
--- a/lib/mp4/parser.js
+++ b/lib/mp4/parser.js
@@ -10,9 +10,9 @@ class Parser {
      * @param {(int|Buffer)} source
      * @returns {Movie}
      */
-    static parse(source) {
+    static async parse(source) {
         let parser = new ParserImpl(source);
-        return parser.parse();
+        return await parser.parse();
     }
 
     /**
diff --git a/lib/readers/buffer-reader.js b/lib/readers/buffer-reader.js
index 4ce6c9e..c14655e 100644
--- a/lib/readers/buffer-reader.js
+++ b/lib/readers/buffer-reader.js
@@ -14,7 +14,7 @@ class BufferReader extends Reader {
         return this.buffer.length;
     }
 
-    read(buffer, offset, targetOffset) {
+    async read(buffer, offset, targetOffset) {
         targetOffset = targetOffset || 0;
         return this.buffer.copy(buffer, targetOffset, offset, offset + buffer.length - targetOffset);
     }
diff --git a/lib/readers/file-reader.js b/lib/readers/file-reader.js
index a2b913d..aa9136b 100644
--- a/lib/readers/file-reader.js
+++ b/lib/readers/file-reader.js
@@ -15,7 +15,7 @@ class FileReader extends Reader {
         return fs.fstatSync(this.fd).size;
     }
 
-    read(buffer, offset, targetOffset) {
+    async read(buffer, offset, targetOffset) {
         targetOffset = targetOffset || 0;
         return fs.readSync(this.fd, buffer, targetOffset, buffer.length - targetOffset, offset);
     }
diff --git a/lib/readers/reader.js b/lib/readers/reader.js
index cbd7059..3b93858 100644
--- a/lib/readers/reader.js
+++ b/lib/readers/reader.js
@@ -6,7 +6,7 @@ class Reader {
 
     }
 
-    read() {
+    async read() {
 
     }

